<source>
 @log_level fatal
 @type forward
 bind 0.0.0.0
 port 24224

 @label @RAW_LOGS
</source>

<label @RAW_LOGS>
    <filter honeypot.**>
        @type record_modifier

        char_encoding utf-8
    </filter>

    <filter honeypot.dionaea>
        @type record_modifier
        <record>
            _dummy_ ${if record["src_ip"].include?('::ffff:'); record["src_ip"] = record["src_ip"].gsub("::ffff:","");end; if record["dst_ip"].include?("::ffff:"); record["dst_ip"] = record["dst_ip"].gsub("::ffff:","")  ;end;nil}
            credentials ${if record["credentials"].kind_of?(Array); record["username"] = record["credentials"][0]["username"]; record["password"] = record["credentials"][0]["password"];end;nil}
            credentials ${if record["credentials"].kind_of?(Hash); record["username"] = record["credentials"]["username"][0]; record["password"] = record["credentials"]["password"][0]; end; nil}
        </record>
        remove_keys credentials, _dummy_

    </filter>

    <filter honeypot.cowrie>
        @type record_modifier
        remove_keys _dummy_
        <record>
            _dummy_ ${if record["dst_port"] == 2222; record["dst_port"] = 22;elsif record["dst_port"] == 2223; record["dst_port"] = 23;end;nil}
        </record>
    </filter>

    <match>
        @type relabel
        @label @GEOIP
    </match>
</label>

<label @GEOIP>
    <filter honeypot.**>
        @type geoip
        geoip_lookup_keys src_ip
        geoip2_database "/fluentd/geoip/GeoLite2-City.mmdb"
        backend_library geoip2_c

        <record>
            #city            ${city.names.en["src_ip"]}	
            #location        '{ "latitude" : ${location.latitude["src_ip"]}, "longitude" : ${location.longitude["src_ip"]} }'
            #country         ${country.names.en["src_ip"]}
            #country_code    ${country.iso_code["src_ip"]}
            #postal_code     ${postal.code["src_ip"]}
            #region_code     ${subdivisions.0.iso_code["src_ip"]}
            #region_name     ${subdivisions.0.names.en["src_ip"]}
            geoip '{ "city": ${city.names.en["src_ip"]}, "location": {"latitude" : ${location.latitude["src_ip"]}, "longitude" : ${location.longitude["src_ip"]}}, "country": ${country.names.en["src_ip"]}, "country_code": ${country.iso_code["src_ip"]}, "postal_code": ${postal.code["src_ip"]}, "region_code": ${subdivisions.0.iso_code["src_ip"]}, "region_name": ${subdivisions.0.names.en["src_ip"]} }'
        </record>
        skip_adding_null_record false
    </filter>

    <match>
        @type relabel
        @label @ASN
    </match>
</label>

<label @ASN>
    <filter honeypot.**>
        @type geoip
        geoip_lookup_keys src_ip
        geoip2_database "/fluentd/geoip/GeoLite2-ASN.mmdb"
        backend_library geoip2_c

        <record>
            asn  ${autonomous_system_number["src_ip"]}
            aso  ${autonomous_system_organization["src_ip"]}
        </record>
        skip_adding_null_record false
    </filter>
    <match>
        @type relabel
        @label @COMBINE
    </match>
</label>

<label @COMBINE>
    <filter honeypot.**>
        @type record_transformer
        remove_keys asn, aso, _dummy_, _dummy2_
        enable_ruby true
        
        <record>
            _dummy_ ${record["geoip"].store("autonomous_system_number",record["asn"])}
            _dummy2_ ${record["geoip"].store("autonomous_system_organization",record["aso"])}
            #geoip '{city => ${record["city"]}, location: ${record["location"]}, country => ${record["country"]}, country_code: ${record["country_code"]}, postal_code: ${record["postal_code"]}, region_code: ${record["region_code"]}, region_name: ${record["region_name"]}, asn: ${record["asn"]}, aso: ${record["aso"]}  }'

        </record>
    </filter>
    <match>
        @type relabel
        @label @OUTPUT
    </match>
</label>

<label @OUTPUT>
    <match honeypot.**>

        # @type copy

        # <store>
        #     @type stdout
        # </store>

        # <store>
            @type mongo
            database fipro
            host mongodb
            port 27017

            collection sensor.log

            <inject>
                time_key timestamp
            </inject>

            capped
            capped_size 500m

            <buffer>
                flush_interval 1s
            </buffer>
        # </store>

        # <store>
        # @type mqtt
        
        # host mqtt-broker
        # port 1883      
        # client_id FLUENTD.HoneypotPublisher

        # <security>
        #     username fluentd
        #     password rustygear125
        # </security>

        # keep_alive 15s

        # <format>
        #     @type json
        #     add_newline false
        # </format>
        # <inject>
        #     time_key timestamp
        # </inject>
        # <buffer>
        #     flush_interval 1s
        # </buffer>
        # </store>

    </match>

</label>

###################################
# FLUENTD-NODE1
# <store>
# @type mqtt

# host mqtt-broker
# port 1883      
# client_id FLUENTD-NODE1.HoneypotPublisher

# <security>
#     username fluentd-node1
#     password rustygear125
# </security>

# keep_alive 15s

# <format>
#     @type json
#     add_newline false
# </format>
# <inject>
#     time_key timestamp
# </inject>
# <buffer>
#     flush_interval 1s
# </buffer>
# </store>

######################################

# FLUENTD-NODE2
# <store>
# @type mqtt

# host mqtt-broker
# port 1883      
# client_id FLUENTD-NODE2.HoneypotPublisher

# <security>
#     username fluentd-node2
#     password rustygear125
# </security>

# keep_alive 15s

# <format>
#     @type json
#     add_newline false
# </format>
# <inject>
#     time_key timestamp
# </inject>
# <buffer>
#     flush_interval 1s
# </buffer>
# </store>